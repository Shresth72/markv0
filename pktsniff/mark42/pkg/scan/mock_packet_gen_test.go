// Code generated by MockGen. DO NOT EDIT.
// Source: packet_gen.go

// Package scan is a generated GoMock package.
package scan

import (
	context "context"
	reflect "reflect"

	packet "github.com/Shresth72/mark42/pkg/packet"
	gomock "github.com/golang/mock/gomock"
	gopacket "github.com/google/gopacket"
)

// MockPacketFiller is a mock of PacketFiller interface.
type MockPacketFiller struct {
	ctrl     *gomock.Controller
	recorder *MockPacketFillerMockRecorder
}

// MockPacketFillerMockRecorder is the mock recorder for MockPacketFiller.
type MockPacketFillerMockRecorder struct {
	mock *MockPacketFiller
}

// NewMockPacketFiller creates a new mock instance.
func NewMockPacketFiller(ctrl *gomock.Controller) *MockPacketFiller {
	mock := &MockPacketFiller{ctrl: ctrl}
	mock.recorder = &MockPacketFillerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPacketFiller) EXPECT() *MockPacketFillerMockRecorder {
	return m.recorder
}

// Fill mocks base method.
func (m *MockPacketFiller) Fill(packet gopacket.SerializeBuffer, r *Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fill", packet, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Fill indicates an expected call of Fill.
func (mr *MockPacketFillerMockRecorder) Fill(packet, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fill", reflect.TypeOf((*MockPacketFiller)(nil).Fill), packet, r)
}

// MockPacketGenerator is a mock of PacketGenerator interface.
type MockPacketGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockPacketGeneratorMockRecorder
}

// MockPacketGeneratorMockRecorder is the mock recorder for MockPacketGenerator.
type MockPacketGeneratorMockRecorder struct {
	mock *MockPacketGenerator
}

// NewMockPacketGenerator creates a new mock instance.
func NewMockPacketGenerator(ctrl *gomock.Controller) *MockPacketGenerator {
	mock := &MockPacketGenerator{ctrl: ctrl}
	mock.recorder = &MockPacketGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPacketGenerator) EXPECT() *MockPacketGeneratorMockRecorder {
	return m.recorder
}

// Packets mocks base method.
func (m *MockPacketGenerator) Packets(ctx context.Context, in <-chan *Request) <-chan *packet.BufferData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Packets", ctx, in)
	ret0, _ := ret[0].(<-chan *packet.BufferData)
	return ret0
}

// Packets indicates an expected call of Packets.
func (mr *MockPacketGeneratorMockRecorder) Packets(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Packets", reflect.TypeOf((*MockPacketGenerator)(nil).Packets), ctx, in)
}
