// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/v-byte-cpu/sx/pkg/packet (interfaces: Sender,Receiver)

// Package scan is a generated GoMock package.
package scan

import (
	context "context"
	reflect "reflect"

	"github.com/Shresth72/mark42/pkg/packet"
	gomock "github.com/golang/mock/gomock"
)

// MockSender is a mock of Sender interface.
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
}

// MockSenderMockRecorder is the mock recorder for MockSender.
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance.
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSender) EXPECT() *MockSenderMockRecorder {
	return m.recorder
}

// SendPackets mocks base method.
func (m *MockSender) SendPackets(arg0 context.Context, arg1 <-chan *packet.BufferData) (<-chan interface{}, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPackets", arg0, arg1)
	ret0, _ := ret[0].(<-chan interface{})
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// SendPackets indicates an expected call of SendPackets.
func (mr *MockSenderMockRecorder) SendPackets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPackets", reflect.TypeOf((*MockSender)(nil).SendPackets), arg0, arg1)
}

// MockReceiver is a mock of Receiver interface.
type MockReceiver struct {
	ctrl     *gomock.Controller
	recorder *MockReceiverMockRecorder
}

// MockReceiverMockRecorder is the mock recorder for MockReceiver.
type MockReceiverMockRecorder struct {
	mock *MockReceiver
}

// NewMockReceiver creates a new mock instance.
func NewMockReceiver(ctrl *gomock.Controller) *MockReceiver {
	mock := &MockReceiver{ctrl: ctrl}
	mock.recorder = &MockReceiverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceiver) EXPECT() *MockReceiverMockRecorder {
	return m.recorder
}

// ReceivePackets mocks base method.
func (m *MockReceiver) ReceivePackets(arg0 context.Context) <-chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceivePackets", arg0)
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// ReceivePackets indicates an expected call of ReceivePackets.
func (mr *MockReceiverMockRecorder) ReceivePackets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceivePackets", reflect.TypeOf((*MockReceiver)(nil).ReceivePackets), arg0)
}
