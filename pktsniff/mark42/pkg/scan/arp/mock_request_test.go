// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Shresth72/mark42/pkg/scan (interfaces: RequestGenerator)

// Package arp is a generated GoMock package.
package arp

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	scan "github.com/Shresth72/mark42/pkg/scan"
)

// MockRequestGenerator is a mock of RequestGenerator interface.
type MockRequestGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockRequestGeneratorMockRecorder
}

// MockRequestGeneratorMockRecorder is the mock recorder for MockRequestGenerator.
type MockRequestGeneratorMockRecorder struct {
	mock *MockRequestGenerator
}

// NewMockRequestGenerator creates a new mock instance.
func NewMockRequestGenerator(ctrl *gomock.Controller) *MockRequestGenerator {
	mock := &MockRequestGenerator{ctrl: ctrl}
	mock.recorder = &MockRequestGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestGenerator) EXPECT() *MockRequestGeneratorMockRecorder {
	return m.recorder
}

// GenerateRequests mocks base method.
func (m *MockRequestGenerator) GenerateRequests(arg0 context.Context, arg1 *scan.Range) (<-chan *scan.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRequests", arg0, arg1)
	ret0, _ := ret[0].(<-chan *scan.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRequests indicates an expected call of GenerateRequests.
func (mr *MockRequestGeneratorMockRecorder) GenerateRequests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRequests", reflect.TypeOf((*MockRequestGenerator)(nil).GenerateRequests), arg0, arg1)
}
