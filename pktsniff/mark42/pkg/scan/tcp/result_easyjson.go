// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package tcp

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA8726613DecodeGithubComShresth72Mark42PkgScanTcp(in *jlexer.Lexer, out *ScanResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "scan":
			out.ScanType = string(in.String())
		case "ip":
			out.IP = string(in.String())
		case "port":
			out.Port = uint16(in.Uint16())
		case "flags":
			out.Flags = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8726613EncodeGithubComShresth72Mark42PkgScanTcp(out *jwriter.Writer, in ScanResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"scan\":"
		out.RawString(prefix[1:])
		out.String(string(in.ScanType))
	}
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix)
		out.String(string(in.IP))
	}
	{
		const prefix string = ",\"port\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Port))
	}
	if in.Flags != "" {
		const prefix string = ",\"flags\":"
		out.RawString(prefix)
		out.String(string(in.Flags))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScanResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA8726613EncodeGithubComShresth72Mark42PkgScanTcp(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScanResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8726613EncodeGithubComShresth72Mark42PkgScanTcp(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScanResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA8726613DecodeGithubComShresth72Mark42PkgScanTcp(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScanResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8726613DecodeGithubComShresth72Mark42PkgScanTcp(l, v)
}
