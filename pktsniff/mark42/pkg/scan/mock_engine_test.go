// Code generated by MockGen. DO NOT EDIT.
// Source: engine.go

// Package scan is a generated GoMock package.
package scan

import (
	context "context"
	reflect "reflect"
	time "time"

	packet "github.com/Shresth72/mark42/pkg/packet"
	gomock "github.com/golang/mock/gomock"
	gopacket "github.com/google/gopacket"
)

// MockEngine is a mock of Engine interface.
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *MockEngineMockRecorder
}

// MockEngineMockRecorder is the mock recorder for MockEngine.
type MockEngineMockRecorder struct {
	mock *MockEngine
}

// NewMockEngine creates a new mock instance.
func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &MockEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngine) EXPECT() *MockEngineMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockEngine) Start(ctx context.Context, r *Range) (<-chan interface{}, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, r)
	ret0, _ := ret[0].(<-chan interface{})
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockEngineMockRecorder) Start(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockEngine)(nil).Start), ctx, r)
}

// MockResulter is a mock of Resulter interface.
type MockResulter struct {
	ctrl     *gomock.Controller
	recorder *MockResulterMockRecorder
}

// MockResulterMockRecorder is the mock recorder for MockResulter.
type MockResulterMockRecorder struct {
	mock *MockResulter
}

// NewMockResulter creates a new mock instance.
func NewMockResulter(ctrl *gomock.Controller) *MockResulter {
	mock := &MockResulter{ctrl: ctrl}
	mock.recorder = &MockResulterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResulter) EXPECT() *MockResulterMockRecorder {
	return m.recorder
}

// Results mocks base method.
func (m *MockResulter) Results() <-chan Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Results")
	ret0, _ := ret[0].(<-chan Result)
	return ret0
}

// Results indicates an expected call of Results.
func (mr *MockResulterMockRecorder) Results() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Results", reflect.TypeOf((*MockResulter)(nil).Results))
}

// MockEngineResulter is a mock of EngineResulter interface.
type MockEngineResulter struct {
	ctrl     *gomock.Controller
	recorder *MockEngineResulterMockRecorder
}

// MockEngineResulterMockRecorder is the mock recorder for MockEngineResulter.
type MockEngineResulterMockRecorder struct {
	mock *MockEngineResulter
}

// NewMockEngineResulter creates a new mock instance.
func NewMockEngineResulter(ctrl *gomock.Controller) *MockEngineResulter {
	mock := &MockEngineResulter{ctrl: ctrl}
	mock.recorder = &MockEngineResulterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngineResulter) EXPECT() *MockEngineResulterMockRecorder {
	return m.recorder
}

// Results mocks base method.
func (m *MockEngineResulter) Results() <-chan Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Results")
	ret0, _ := ret[0].(<-chan Result)
	return ret0
}

// Results indicates an expected call of Results.
func (mr *MockEngineResulterMockRecorder) Results() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Results", reflect.TypeOf((*MockEngineResulter)(nil).Results))
}

// Start mocks base method.
func (m *MockEngineResulter) Start(ctx context.Context, r *Range) (<-chan interface{}, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, r)
	ret0, _ := ret[0].(<-chan interface{})
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockEngineResulterMockRecorder) Start(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockEngineResulter)(nil).Start), ctx, r)
}

// MockPacketSource is a mock of PacketSource interface.
type MockPacketSource struct {
	ctrl     *gomock.Controller
	recorder *MockPacketSourceMockRecorder
}

// MockPacketSourceMockRecorder is the mock recorder for MockPacketSource.
type MockPacketSourceMockRecorder struct {
	mock *MockPacketSource
}

// NewMockPacketSource creates a new mock instance.
func NewMockPacketSource(ctrl *gomock.Controller) *MockPacketSource {
	mock := &MockPacketSource{ctrl: ctrl}
	mock.recorder = &MockPacketSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPacketSource) EXPECT() *MockPacketSourceMockRecorder {
	return m.recorder
}

// Packets mocks base method.
func (m *MockPacketSource) Packets(ctx context.Context, r *Range) <-chan *packet.BufferData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Packets", ctx, r)
	ret0, _ := ret[0].(<-chan *packet.BufferData)
	return ret0
}

// Packets indicates an expected call of Packets.
func (mr *MockPacketSourceMockRecorder) Packets(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Packets", reflect.TypeOf((*MockPacketSource)(nil).Packets), ctx, r)
}

// MockPacketMethod is a mock of PacketMethod interface.
type MockPacketMethod struct {
	ctrl     *gomock.Controller
	recorder *MockPacketMethodMockRecorder
}

// MockPacketMethodMockRecorder is the mock recorder for MockPacketMethod.
type MockPacketMethodMockRecorder struct {
	mock *MockPacketMethod
}

// NewMockPacketMethod creates a new mock instance.
func NewMockPacketMethod(ctrl *gomock.Controller) *MockPacketMethod {
	mock := &MockPacketMethod{ctrl: ctrl}
	mock.recorder = &MockPacketMethodMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPacketMethod) EXPECT() *MockPacketMethodMockRecorder {
	return m.recorder
}

// Packets mocks base method.
func (m *MockPacketMethod) Packets(ctx context.Context, r *Range) <-chan *packet.BufferData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Packets", ctx, r)
	ret0, _ := ret[0].(<-chan *packet.BufferData)
	return ret0
}

// Packets indicates an expected call of Packets.
func (mr *MockPacketMethodMockRecorder) Packets(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Packets", reflect.TypeOf((*MockPacketMethod)(nil).Packets), ctx, r)
}

// ProcessPacketData mocks base method.
func (m *MockPacketMethod) ProcessPacketData(data []byte, ci *gopacket.CaptureInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPacketData", data, ci)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessPacketData indicates an expected call of ProcessPacketData.
func (mr *MockPacketMethodMockRecorder) ProcessPacketData(data, ci interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPacketData", reflect.TypeOf((*MockPacketMethod)(nil).ProcessPacketData), data, ci)
}

// Results mocks base method.
func (m *MockPacketMethod) Results() <-chan Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Results")
	ret0, _ := ret[0].(<-chan Result)
	return ret0
}

// Results indicates an expected call of Results.
func (mr *MockPacketMethodMockRecorder) Results() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Results", reflect.TypeOf((*MockPacketMethod)(nil).Results))
}

// MockScanner is a mock of Scanner interface.
type MockScanner struct {
	ctrl     *gomock.Controller
	recorder *MockScannerMockRecorder
}

// MockScannerMockRecorder is the mock recorder for MockScanner.
type MockScannerMockRecorder struct {
	mock *MockScanner
}

// NewMockScanner creates a new mock instance.
func NewMockScanner(ctrl *gomock.Controller) *MockScanner {
	mock := &MockScanner{ctrl: ctrl}
	mock.recorder = &MockScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScanner) EXPECT() *MockScannerMockRecorder {
	return m.recorder
}

// Scan mocks base method.
func (m *MockScanner) Scan(ctx context.Context, r *Request) (Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", ctx, r)
	ret0, _ := ret[0].(Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scan indicates an expected call of Scan.
func (mr *MockScannerMockRecorder) Scan(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockScanner)(nil).Scan), ctx, r)
}

// MockRateLimiter is a mock of RateLimiter interface.
type MockRateLimiter struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimiterMockRecorder
}

// MockRateLimiterMockRecorder is the mock recorder for MockRateLimiter.
type MockRateLimiterMockRecorder struct {
	mock *MockRateLimiter
}

// NewMockRateLimiter creates a new mock instance.
func NewMockRateLimiter(ctrl *gomock.Controller) *MockRateLimiter {
	mock := &MockRateLimiter{ctrl: ctrl}
	mock.recorder = &MockRateLimiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimiter) EXPECT() *MockRateLimiterMockRecorder {
	return m.recorder
}

// Take mocks base method.
func (m *MockRateLimiter) Take() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Take")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Take indicates an expected call of Take.
func (mr *MockRateLimiterMockRecorder) Take() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Take", reflect.TypeOf((*MockRateLimiter)(nil).Take))
}
