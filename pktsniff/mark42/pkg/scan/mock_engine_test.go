// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Shresth72/mark42/pkg/scan (interfaces: PacketSource,Scanner)

// Package scan is a generated GoMock package.
package scan

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	packet "github.com/Shresth72/mark42/pkg/packet"
)

// MockPacketSource is a mock of PacketSource interface.
type MockPacketSource struct {
	ctrl     *gomock.Controller
	recorder *MockPacketSourceMockRecorder
}

// MockPacketSourceMockRecorder is the mock recorder for MockPacketSource.
type MockPacketSourceMockRecorder struct {
	mock *MockPacketSource
}

// NewMockPacketSource creates a new mock instance.
func NewMockPacketSource(ctrl *gomock.Controller) *MockPacketSource {
	mock := &MockPacketSource{ctrl: ctrl}
	mock.recorder = &MockPacketSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPacketSource) EXPECT() *MockPacketSourceMockRecorder {
	return m.recorder
}

// Packets mocks base method.
func (m *MockPacketSource) Packets(arg0 context.Context, arg1 *Range) <-chan *packet.BufferData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Packets", arg0, arg1)
	ret0, _ := ret[0].(<-chan *packet.BufferData)
	return ret0
}

// Packets indicates an expected call of Packets.
func (mr *MockPacketSourceMockRecorder) Packets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Packets", reflect.TypeOf((*MockPacketSource)(nil).Packets), arg0, arg1)
}

// MockScanner is a mock of Scanner interface.
type MockScanner struct {
	ctrl     *gomock.Controller
	recorder *MockScannerMockRecorder
}

// MockScannerMockRecorder is the mock recorder for MockScanner.
type MockScannerMockRecorder struct {
	mock *MockScanner
}

// NewMockScanner creates a new mock instance.
func NewMockScanner(ctrl *gomock.Controller) *MockScanner {
	mock := &MockScanner{ctrl: ctrl}
	mock.recorder = &MockScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScanner) EXPECT() *MockScannerMockRecorder {
	return m.recorder
}

// Scan mocks base method.
func (m *MockScanner) Scan(arg0 context.Context, arg1 *Request) (Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", arg0, arg1)
	ret0, _ := ret[0].(Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scan indicates an expected call of Scan.
func (mr *MockScannerMockRecorder) Scan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockScanner)(nil).Scan), arg0, arg1)
}
